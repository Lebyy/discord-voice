{"meta":{"generator":"0.11.1","format":20,"date":1657559928044},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# <p align=\"center\"><a href=\"https://discord-voice.js.org\"><img src=\"https://discord-voice.js.org/icon-resized.png\"></a></p><p align=\"center\">Discord Voice</p>\n\n# <p align=\"center\"><a href=\"https://discord.gg/pndumb6J3t\" target=\"_blank\"> <img alt=\"Discord\" src=\"https://img.shields.io/badge/Chat-Click%20here-7289d9?style=for-the-badge&logo=discord\"> </a> <img src=\"https://img.shields.io/npm/dt/discord-voice?style=for-the-badge\"> <img src=\"https://img.shields.io/npm/v/discord-voice?style=for-the-badge\"> <a href=\"https://discord-voice.js.org\"><img src=\"https://img.shields.io/badge/Documentation-Click%20here-blue?style=for-the-badge\" alt=\"Documentation - https://discord-voice.js.org\"/></a></p>\n\n# What is Discord Voice?\n\n> Discord Voice is a powerful [Node.js](https://nodejs.org/) module that allows you to easily track the user's voice time and levels!\n\n# Features\n\n-   **‚ú® Easy to use!**\n-   **üìÅ Support for all databases! (default is json)**\n-   **‚öôÔ∏è Very customizable! (ignored channels, ignored members, ignored permissions, xp amount to add, voice time to add etc...)**\n-   **üöÄ Super powerful: createUser, createConfig, removeUser, removeConfig, updateUser and updateConfig!**\n-   **üï∏Ô∏è Support for shards!**\n-   **and much more!**\n\n# Installation\n\n```bash\nnpm install --save discord-voice\n```\n\n# Examples\n\nYou can use this example bot on GitHub: [VoiceTimeTrackerBot](https://github.com/Lebyy/VoiceTimeTrackerBot)\n\n# Usage of the modudle\n\n```js\nconst { Client, Intents } = require(\"discord.js\"),\n    client = new Client({\n        intents: [Intents.FLAGS.GUILD_VOICE_STATES, Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES] // The GUILD_VOICE_STATES and GUILDS intents are required for discord-voice to function.\n    }),\n    settings = {\n        prefix: \"v!\",\n        token: \"Your Discord Bot Token\"\n    };\n\n// Requires Manager from discord-voice\nconst { VoiceManager } = require(\"discord-voice\");\n// Create a new instance of the manager class\nconst manager = new VoiceManager(client, {\n    userStorage: \"./users.json\",\n    configStorage: \"./configs.json\",\n    checkMembersEvery: 5000,\n    default: {\n        trackBots: false,\n        trackAllChannels: true\n    }\n});\n// We now have a voiceManager property to access the manager everywhere!\nclient.voiceManager = manager;\n```\n\nAfter that, user's who are in the voice channel's that the bot has cached will be checked. You can pass an options object to customize the config. For a list of them refer to the [documentation](https://discord-voice.js.org/docs/main/master/typedef/VoiceManagerOptions).\n\n# Create an user\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"create-user\") {\n        client.voiceManager.createUser(message.author.id, message.guild.id, {\n            levelingData: {\n                xp: 0,\n                level: 0\n            }\n            // The user will have 0 xp and 0 level.\n        });\n    }\n});\n```\n\nThis allow's you create a user in the database if the user is not already present in the database. You can pass an options object to customize the user's data. For a list of them refer to the [documentation](https://discord-voice.js.org/docs/main/master/typedef/UserOptions).\n\n# Create a config\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"create-config\") {\n        client.voiceManager.createConfig(message.guild.id, {\n            trackBots: false, // If the user is a bot it will not be tracked.\n            trackAllChannels: true, // All of the channels in the guild will be tracked.\n            exemptChannels: () => false, // The user will not be tracked in these channels. (This is a function).\n            channelIds: [], // The channel ids to track. (If trackAllChannels is true, this is ignored)\n            exemptPermissions: [], // The user permissions to not track.\n            exemptMembers: () => false, // The user will not be tracked. (This is a function).\n            trackMute: true, // It will track users if they are muted aswell.\n            trackDeaf: true, // It will track users if they are deafen aswell.\n            minUserCountToParticipate: 0, // The min amount of users to be in a channel to be tracked.\n            maxUserCountToParticipate: 0, // The max amount of users to be in a channel to be tracked.\n            minXpToParticipate: 0, // The min amount of xp needed to be tracked.\n            minLevelToParticipate: 0, // The min level needed to be tracked.\n            maxXpToParticipate: 0, // The max amount of xp needed to be tracked.\n            maxLevelToParticipate: 0, // The max level needed to be tracked.\n            xpAmountToAdd: () => Math.floor(Math.random() * 10) + 1, // The amount of xp to add to the user (This is a function).\n            voiceTimeToAdd: () => 1000, // The amount of time in ms to add to the user (This is a function).\n            voiceTimeTrackingEnabled: true, // Whether the voiceTimeTracking module is enabled.\n            levelingTrackingEnabled: true // Whether the levelingTracking module is enabled.\n        });\n    }\n});\n```\n\nThis allow's you create a config in the database if the config is not already present in the database. You can pass an options object to customize the config's data. For a list of them refer to the [documentation](https://discord-voice.js.org/docs/main/master/typedef/ConfigOptions).\n\n# Remove an user\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"remove-user\") {\n        client.voiceManager.removeUser(message.author.id, message.guild.id); // Removes the user from the database and the cache.\n    }\n});\n```\n\n# Remove a config\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"remove-config\") {\n        client.voiceManager.removeConfig(message.guild.id); // Removes the config from the database and the cache.\n    }\n});\n```\n\n# Updating an user\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"edit-user\") {\n        client.voiceManager.updateUser(message.author.id, message.guild.id, {\n            newVoiceTime: {\n                channels: [],\n                total: 0\n            } // The new voice time user will have.\n        });\n    }\n});\n```\n\nThis allow's you edit a user's data. You need to pass an options object to edit the user's data. For a list of them refer to the [documentation](https://discord-voice.js.org/docs/main/master/typedef/UserEditOptions).\n\n# Updating a config\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"edit-config\") {\n        client.voiceManager.updateConfig(message.guild.id, {\n            newTrackBots: true // The module will now track bot user's voice time aswell.\n        });\n    }\n});\n```\n\nThis allow's you edit a config's data. You need to pass an options object to edit the config's data. For a list of them refer to the [documentation](https://discord-voice.js.org/docs/main/master/typedef/ConfigEditOptions).\n\n# Fetch users\n\n```js\n// A list of all the users\nconst allUsers = client.voiceManager.users; // [ {User}, {User} ]\n\n// A list of all the users on the server with ID \"1909282092\"\nconst onServer = client.voiceManager.users.filter((u) => u.guildId === \"1909282092\");\n\n// The user on the server with Id \"1909282092\" and the user Id \"1234567890\"\nconst user = client.voiceManager.users.filter((u) => u.guildId === \"1909282092\" && u.userId === \"1234567890\");\n```\n\n# Fetch configs\n\n```js\n// A list of all the configs\nconst allConfigs = client.voiceManager.configs; // [ {Config}, {Config} ]\n\n// The config of the guild with Id \"1909282092\"\nconst config = client.voiceManager.configs.filter((c) => c.guildId === \"1909282092\");\n```\n\n# Exempt Channels\n\n```js\nclient.voiceManager.updateConfig(message.guild.id, {\n    // The channel will not be tracked if it's name is \"private\"\n    exemptChannels: (channel) => channel.name === \"private\")\n});\n```\n\n‚ö†Ô∏è Note: If the function should be customizable\n\n```js\nconst channelName = \"private\";\nclient.voiceManager.updateConfig(message.guild.id, {\n    // The channel won't be tracked if it's name is equal to the value which is assigned to \"channelName\"\n    exemptChannels: new Function(\"channel\", `return channel.name === \\'${channelName}\\'`)\n});\n```\n\n# Exempt Members\n\n```js\nclient.voiceManager.updateConfig(message.guild.id, {\n    // Only members who have the \"Nitro Boost\" role are able to be tracked\n    exemptMembers: (member) => !member.roles.cache.some((r) => r.name === \"Nitro Boost\")\n});\n```\n\n‚ö†Ô∏è Note: If the function should be customizable\n\n```js\nconst roleName = \"Nitro Boost\";\nclient.voiceManager.updateConfig(message.guild.id, {\n    // Only members who have the the role which is assigned to \"roleName\" are able to be tracked\n    exemptMembers: new Function(\"member\", `return !member.roles.cache.some((r) => r.name === \\'${roleName}\\')`)\n});\n```\n\n# Voice Time To Add\n\n```js\nclient.voiceManager.updateConfig(message.guild.id, {\n    xpAmountToAdd: () => Math.floor(Math.random() * 10) + 1 // This will add a random amount between 1 and 10 of xp to the user.\n});\n```\n\n‚ö†Ô∏è Note: The returned value should be a number or the default value (`Math.floor(Math.random() * 10) + 1`) will be used.\n\n# Xp Amount To Add\n\n```js\nclient.voiceManager.updateConfig(message.guild.id, {\n    voiceTimeToAdd: () => 1000 // This will add 1000 ms of voice time everytime the user is checked.\n});\n```\n\n‚ö†Ô∏è Note: The returned value should be a number or the default value (`1000`) will be used.\n\n# Level Multiplier\n\n```js\nclient.voiceManager.updateConfig(message.guild.id, {\n    levelMultiplier: () => 0.1 // This will set the level multiplier to 0.1 (normally it's 0.1).\n});\n```\n\n‚ö†Ô∏è Note: The returned value should be a number or the default value (`0.1`) will be used.\n\n# Custom Database\n\nYou can use your custom database to save users and configs, instead of the json files (the \"database\" by default for `discord-voice`). For this, you will need to extend the `VoiceManager` class, and replace some methods with your custom ones. There are 8 methods you will need to replace:\n\n-   `getAllUsers`: this method returns an array of stored users.\n-   `getAllConfigs`: this method returns an array of stored configs.\n-   `saveUser`: this method stores a new user in the database.\n-   `saveConfig`: this method stores a new config in the database.\n-   `editUser`: this method edits a user already stored in the database.\n-   `editConfig`: this method edits a config already stored in the database.\n-   `deleteUser`: this method deletes a user from the database (permanently).\n-   `deleteConfig`: this method deletes a config from the database (permanently).\n\n**‚ö†Ô∏è All the methods should be asynchronous to return a promise!**\n\nHere is an example, using `quick.db`, a SQLite database. The comments in the code below are very important to understand how it works!\n\nOther examples:\n\n-   MongoDB\n    -   [Mongoose](https://github.com/Lebyy/discord-voice/blob/master/examples/custom-databases/mongoose.js)\n    -   [QuickMongo](https://github.com/Lebyy/discord-voice/blob/master/examples/custom-databases/quickmongo.js) ‚ö†Ô∏è Not recommended for high giveaway usage, use the `mongoose` example instead\n-   [Enmap](https://github.com/Lebyy/discord-voice/blob/master/examples/custom-databases/enmap.js)\n-   Replit Database ‚ö†Ô∏è Only usable if your bot is hosted on [Replit](https://replit.com/)\n    -   [Quick.Replit](https://github.com/Lebyy/discord-voice/blob/master/examples/custom-databases/quickreplit.js)\n\n```js\nconst { Client, Intents } = require(\"discord.js\"), // npm install discord.js\n    client = new Client({\n        intents: [Intents.FLAGS.GUILD_VOICE_STATES, Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES] // The GUILD_VOICE_STATES and GUILDS intents are required for discord-voice to function.\n    }),\n    settings = {\n        prefix: \"v!\",\n        token: \"Your Discord Bot Token\"\n    };\n\n// Load quick.db - it's an example of custom database, you can use MySQL, PostgreSQL, etc...\nconst db = require(\"quick.db\");\nif (!Array.isArray(db.get(\"users\"))) db.set(\"users\", []);\nif (!Array.isArray(db.get(\"configs\"))) db.set(\"configs\", []);\n\nconst { VoiceManager } = require(\"discord-voice\");\nconst VoiceManagerWithOwnDatabase = class extends VoiceManager {\n    // This function is called when the manager needs to get all users which are stored in the database.\n    async getAllUsers() {\n        // Get all users from the database\n        return db.get(\"users\");\n    }\n\n    // This function is called when the manager needs to get all configs which are stored in the database.\n    async getAllConfigs() {\n        // Get all configs from the database\n        return db.get(\"configs\");\n    }\n\n    // This function is called when a user needs to be saved in the database.\n    async saveUser(userId, guildId, userData) {\n        // Add the new user to the database\n        db.push(\"users\", userData);\n        // Don't forget to return something!\n        return true;\n    }\n\n    // This function is called when a user needs to be saved in the database.\n    async saveConfig(guildId, configData) {\n        // Add the new user to the database\n        db.push(\"configs\", configData);\n        // Don't forget to return something!\n        return true;\n    }\n\n    // This function is called when a user needs to be edited in the database.\n    async editUser(userId, guildId, userData) {\n        // Get all users from the database\n        const users = db.get(\"users\");\n        // Find the user to edit\n        const user = users.find((u) => u.guildId === guildId && u.userId === userId);\n        // Remove the unedited user from the array\n        const newUsersArray = users.filter((u) => u !== user);\n        // Push the edited user into the array\n        newUsersArray.push(userData);\n        // Save the updated array\n        db.set(\"users\", newUsersArray);\n        // Don't forget to return something!\n        return true;\n    }\n\n    // This function is called when a config needs to be edited in the database.\n    async editConfig(guildId, configData) {\n        // Get all configs from the database\n        const configs = db.get(\"configs\");\n        // Remove the unedited config from the array\n        const newConfigsArray = configs.filter((config) => config.guildId !== guildId);\n        // Push the edited config into the array\n        newConfigsArray.push(configData);\n        // Save the updated array\n        db.set(\"configs\", newConfigsArray);\n        // Don't forget to return something!\n        return true;\n    }\n\n    // This function is called when a user needs to be deleted from the database.\n    async deleteUser(userId, guildId) {\n        // Get all users from the database\n        const users = db.get(\"users\");\n        // Find the user to edit\n        const user = users.find((u) => u.guildId === guildId && u.userId === userId);\n        // Remove the user from the array\n        const newUsersArray = users.filter((u) => u !== user);\n        // Save the updated array\n        db.set(\"users\", newUsersArray);\n        // Don't forget to return something!\n        return true;\n    }\n\n    // This function is called when a config needs to be deleted from the database.\n    async deleteConfig(guildId) {\n        // Get all configs from the database\n        const configs = db.get(\"configs\");\n        // Remove the config from the array\n        const newConfigsArray = configs.filter((config) => config.guildId !== guildId);\n        // Save the updated array\n        db.set(\"configs\", newConfigsArray);\n        // Don't forget to return something!\n        return true;\n    }\n};\n\n// Create a new instance of your new class\nconst manager = new VoiceManagerWithOwnDatabase(client, {\n    checkMembersEvery: 5000,\n    default: {\n        trackBots: false,\n        trackAllChannels: true\n    }\n});\n// We now have a voiceManager property to access the manager everywhere!\nclient.voiceManager = manager;\n\nclient.on(\"ready\", () => {\n    console.log(\"I'm ready!\");\n});\n\nclient.login(settings.token);\n```\n\n# Shards Support\n\nTo make `discord-voice` work with shards, you will need to extend the `VoiceManager` class and update the `refreshStorage()` method. This method should call the `getAllUsers()` and `getAllConfigs()` method for every shard, so all `VoiceManager`'s synchronize their cache with the updated database.\n\n```js\nconst { Client, Intents } = require(\"discord.js\"), // npm install discord.js\n    client = new Client({\n        intents: [Intents.FLAGS.GUILD_VOICE_STATES, Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES] // The GUILD_VOICE_STATES and GUILDS intents are required for discord-voice to function.\n    }),\n    settings = {\n        prefix: \"v!\",\n        token: \"Your Discord Bot Token\"\n    };\n\n// Extends the VoiceManager class and update the refreshStorage method\nconst { VoiceManager } = require(\"discord-voice\");\nconst VoiceManagerWithShardSupport = class extends VoiceManager {\n    // The refreshStorage method is called when the database is updated on one of the shards\n    async refreshStorage() {\n        // This should make all shards refresh their cache with the updated database\n        return client.shard.broadcastEval(() => this.voiceManager.getAllUsers() && this.voiceManager.getAllConfigs());\n    }\n};\n\n// Create a new instance of your new class\nconst manager = new VoiceManagerWithShardSupport(client, {\n    userStorage: \"./users.json\",\n    configStorage: \"./configs.json\",\n    checkMembersEvery: 5000,\n    default: {\n        trackBots: false,\n        trackAllChannels: true\n    }\n});\n// We now have a voiceManager property to access the manager everywhere!\nclient.voiceManager = manager;\n\nclient.on(\"ready\", () => {\n    console.log(\"I'm ready!\");\n});\n\nclient.login(settings.token);\n```\n\n<div>Icons made by <a href=\"https://www.flaticon.com/authors/surang\" title=\"surang\">surang</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n","path":"docs/general/welcome.md"}}}},"classes":[{"name":"Channel","description":"<p>Represents a Channel.</p>","construct":{"name":"Channel","params":[{"name":"manager","description":"<p>The voice time manager.</p>","type":[[["VoiceManager"]]]},{"name":"guild","description":"<p>The guild class.</p>","type":[[["Guild"]]]},{"name":"channelId","description":"<p>The channel id.</p>","type":[[["Snowflake"]]]},{"name":"options","description":"<p>The channel options.</p>","type":[[["ChannelOptions"]]]}]},"props":[{"name":"manager","description":"<p>The voice time manager.</p>","type":[[["VoiceManager"]]],"meta":{"line":18,"file":"Channel.js","path":"src"}},{"name":"client","description":"<p>The Discord client.</p>","type":[[["Client"]]],"meta":{"line":23,"file":"Channel.js","path":"src"}},{"name":"guild","description":"<p>The guild class.</p>","type":[[["Guild"]]],"meta":{"line":28,"file":"Channel.js","path":"src"}},{"name":"guildId","description":"<p>The guild id.</p>","type":[[["Snowflake"]]],"meta":{"line":33,"file":"Channel.js","path":"src"}},{"name":"channelId","description":"<p>The channel id.</p>","type":[[["Snowflake"]]],"meta":{"line":38,"file":"Channel.js","path":"src"}},{"name":"timeInChannel","description":"<p>The time spent in this channel.</p>","type":[[["number"]]],"meta":{"line":43,"file":"Channel.js","path":"src"}},{"name":"options","description":"<p>The options for this channel.</p>","type":[[["ChannelOptions"]]],"meta":{"line":48,"file":"Channel.js","path":"src"}},{"name":"data","description":"<p>The raw channel data object.</p>","readonly":true,"type":[[["ChannelData"]]],"meta":{"line":55,"file":"Channel.js","path":"src"}}],"methods":[{"name":"edit","description":"<p>Edits the channel.</p>","params":[{"name":"options","description":"<p>The new channel options.</p>","type":[[["ChannelEditOptions"]]]}],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":69,"file":"Channel.js","path":"src"}}],"meta":{"line":5,"file":"Channel.js","path":"src"}},{"name":"Config","description":"<p>Represents a Config</p>","construct":{"name":"Config","params":[{"name":"manager","description":"<p>The Voice Manager</p>","type":[[["VoiceManager"]]]},{"name":"options","description":"<p>The config options</p>","type":[[["ConfigOptions"]]]}]},"props":[{"name":"manager","description":"<p>The voice time manager.</p>","type":[[["VoiceManager"]]],"meta":{"line":15,"file":"Config.js","path":"src"}},{"name":"client","description":"<p>The Discord client.</p>","type":[[["Client"]]],"meta":{"line":20,"file":"Config.js","path":"src"}},{"name":"guild","description":"<p>The guild class.</p>","type":[[["Guild"]]],"meta":{"line":25,"file":"Config.js","path":"src"}},{"name":"guildId","description":"<p>The guild id.</p>","type":[[["Snowflake"]]],"meta":{"line":30,"file":"Config.js","path":"src"}},{"name":"options","description":"<p>The config options.</p>","type":[[["ConfigOptions"]]],"meta":{"line":35,"file":"Config.js","path":"src"}},{"name":"trackBots","description":"<p>Whether bots are able to be tracked.</p>","type":[[["Boolean"]]],"meta":{"line":42,"file":"Config.js","path":"src"}},{"name":"trackMute","description":"<p>Whether to track all of the guild's voice channels.</p>","type":[[["Boolean"]]],"meta":{"line":50,"file":"Config.js","path":"src"}},{"name":"trackDeaf","description":"<p>Whether members who are deafened should be tracked.</p>","type":[[["Boolean"]]],"meta":{"line":58,"file":"Config.js","path":"src"}},{"name":"trackAllChannels","description":"<p>Whether all of the guild's voice channels should be tracked.</p>","type":[[["Boolean"]]],"meta":{"line":66,"file":"Config.js","path":"src"}},{"name":"channelIds","description":"<p>The channels to track (if trackAllChannels is true this will be ignored).</p>","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":74,"file":"Config.js","path":"src"}},{"name":"minUserCountToParticipate","description":"<p>The min amount of users to be in a channel to be tracked (0 is equal to no limit).</p>","type":[[["Number"]]],"meta":{"line":82,"file":"Config.js","path":"src"}},{"name":"maxUserCountToParticipate","description":"<p>The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).</p>","type":[[["Number"]]],"meta":{"line":90,"file":"Config.js","path":"src"}},{"name":"minXpToParticipate","description":"<p>The min amount of xp the user needs to have to be tracked (0 is equal to no limit).</p>","type":[[["Number"]]],"meta":{"line":98,"file":"Config.js","path":"src"}},{"name":"minLevelToParticipate","description":"<p>The min amount of level the user needs to have to be tracked (0 is equal to no limit).</p>","type":[[["Number"]]],"meta":{"line":106,"file":"Config.js","path":"src"}},{"name":"maxXpToParticipate","description":"<p>The max amount of xp the user can be tracked uptil (0 is equal to no limit).</p>","type":[[["Number"]]],"meta":{"line":114,"file":"Config.js","path":"src"}},{"name":"maxLevelToParticipate","description":"<p>The max amount of level the user can be tracked uptil (0 is equal to no limit).</p>","type":[[["Number"]]],"meta":{"line":122,"file":"Config.js","path":"src"}},{"name":"voiceTimeTrackingEnabled","description":"<p>Whether the voice time tracking module is enabled.</p>","type":[[["Boolean"]]],"meta":{"line":130,"file":"Config.js","path":"src"}},{"name":"levelingTrackingEnabled","description":"<p>Whether the leveling tracking module is enabled.</p>","type":[[["Boolean"]]],"meta":{"line":138,"file":"Config.js","path":"src"}},{"name":"exemptPermissions","description":"<p>Members with any of these permissions won't be tracked.</p>","type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":146,"file":"Config.js","path":"src"}},{"name":"data","description":"<p>The raw config data object.</p>","type":[[["ConfigData"]]],"meta":{"line":156,"file":"Config.js","path":"src"}},{"name":"exemptMembersFunction","description":"<p>The exemptMembers function</p>","type":[[["ExemptMembersFunction"]]],"meta":{"line":201,"file":"Config.js","path":"src"}},{"name":"exemptChannelsFunction","description":"<p>The exemptChannels function</p>","type":[[["ExemptChannelsFunction"]]],"meta":{"line":214,"file":"Config.js","path":"src"}},{"name":"xpAmountToAddFunction","description":"<p>The xpAmountToAdd function</p>","type":[[["XPAmountToAddFunction"]]],"meta":{"line":227,"file":"Config.js","path":"src"}},{"name":"voiceTimeToAddFunction","description":"<p>The voiceTimeToAdd function</p>","type":[[["VoiceTimeToAddFunction"]]],"meta":{"line":240,"file":"Config.js","path":"src"}},{"name":"levelMultiplierFunction","description":"<p>The levelMultiplier function</p>","type":[[["LevelMultiplierFunction"]]],"meta":{"line":253,"file":"Config.js","path":"src"}}],"methods":[{"name":"exemptMembers","description":"<p>Function to filter members. If true is returned, the member won't be tracked.</p>","async":true,"returns":[[["Promise","<"],["Boolean",">"]]],"meta":{"line":266,"file":"Config.js","path":"src"}},{"name":"exemptChannels","description":"<p>Function to filter channels. If true is returned, the channel won't be tracked.</p>","async":true,"returns":[[["Promise","<"],["Number",">"]]],"meta":{"line":291,"file":"Config.js","path":"src"}},{"name":"xpAmountToAdd","description":"<p>Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).</p>","async":true,"returns":[[["Promise","<"],["Number",">"]]],"meta":{"line":315,"file":"Config.js","path":"src"}},{"name":"voiceTimeToAdd","description":"<p>Function for voiceTimeToAdd. If not provided, the default value is used (1000).</p>","async":true,"returns":[[["Promise","<"],["Number",">"]]],"meta":{"line":338,"file":"Config.js","path":"src"}},{"name":"levelMultiplier","description":"<p>Function for levelMultiplier. If not provided, the default value is used (0.1).</p>","async":true,"returns":[[["Promise","<"],["Number",">"]]],"meta":{"line":361,"file":"Config.js","path":"src"}},{"name":"checkMember","description":"<p>Function to check if the member is exempt from xp tracking.</p>","params":[{"name":"member","description":"<p>The member to check</p>","type":[[["Member"]]]}],"async":true,"returns":[[["Promise","<"],["Boolean",">"]]],"meta":{"line":384,"file":"Config.js","path":"src"}},{"name":"checkChannel","description":"<p>Function to check if the channel is exempt from xp tracking.</p>","params":[{"name":"channel","description":"<p>The channel to check</p>","type":[[["VoiceChannel"]]]}],"async":true,"returns":[[["Promise","<"],["Boolean",">"]]],"meta":{"line":406,"file":"Config.js","path":"src"}},{"name":"edit","description":"<p>Edits the config</p>","params":[{"name":"options","description":"<p>The edit options</p>","type":[[["ConfigEditOptions"]]]}],"returns":[[["Promise","<"],["Config",">"]]],"meta":{"line":420,"file":"Config.js","path":"src"}}],"meta":{"line":5,"file":"Config.js","path":"src"}},{"name":"Guild","description":"<p>Represents a Guild.</p>","construct":{"name":"Guild","params":[{"name":"manager","description":"<p>The voice time manager.</p>","type":[[["VoiceManager"]]]},{"name":"guildId","description":"<p>The guild id.</p>","type":[[["Snowflake"]]]},{"name":"options","description":"<p>The guild options.</p>","type":[[["GuildOptions"]]]}]},"props":[{"name":"manager","description":"<p>The voice time manager.</p>","type":[[["VoiceManager"]]],"meta":{"line":21,"file":"Guild.js","path":"src"}},{"name":"client","description":"<p>The Discord client.</p>","type":[[["Client"]]],"meta":{"line":26,"file":"Guild.js","path":"src"}},{"name":"guildId","description":"<p>The guild id.</p>","type":[[["Snowflake"]]],"meta":{"line":31,"file":"Guild.js","path":"src"}},{"name":"users","description":"<p>The users stored in this guild.</p>","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":36,"file":"Guild.js","path":"src"}},{"name":"config","description":"<p>The config for this guild.</p>","type":[[["Config"]]],"meta":{"line":43,"file":"Guild.js","path":"src"}},{"name":"options","description":"<p>The options for this guild.</p>","type":[[["GuildOptions"]]],"meta":{"line":48,"file":"Guild.js","path":"src"}},{"name":"guild","description":"<p>The discord guild.</p>","readonly":true,"type":[[["DiscordGuild"]]],"meta":{"line":55,"file":"Guild.js","path":"src"}},{"name":"data","description":"<p>The raw guild data object.</p>","readonly":true,"type":[[["GuildData"]]],"meta":{"line":64,"file":"Guild.js","path":"src"}}],"methods":[{"name":"edit","description":"<p>Edits the guild.</p>","params":[{"name":"options","description":"<p>The options to edit the guild with.</p>","type":[[["GuildEditOptions"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":78,"file":"Guild.js","path":"src"}}],"meta":{"line":9,"file":"Guild.js","path":"src"}},{"name":"VoiceManager","description":"<p>Voice Manager</p>","construct":{"name":"VoiceManager","params":[{"name":"client","description":"<p>The Discord Client</p>","type":[[["Client"]]]},{"name":"options","description":"<p>The manager options</p>","type":[[["VoiceManagerOptions"]]]}]},"props":[{"name":"client","description":"<p>The Discord Client</p>","type":[[["Client"]]],"meta":{"line":45,"file":"Manager.js","path":"src"}},{"name":"ready","description":"<p>Whether the manager is ready</p>","type":[[["Boolean"]]],"meta":{"line":50,"file":"Manager.js","path":"src"}},{"name":"guilds","description":"<p>The guilds managed by this manager</p>","type":[[["Collection","<"],["String",", "],["Guild",">"]]],"meta":{"line":55,"file":"Manager.js","path":"src"}},{"name":"options","description":"<p>The manager options</p>","type":[[["VoiceManagerOptions"]]],"meta":{"line":60,"file":"Manager.js","path":"src"}}],"methods":[{"name":"create","description":"<p>Creates a new guild in the database</p>","examples":["client.voiceManager.create(interaction.guild.id, {\n users: [], // Array of user data's\n config: {\n     trackBots: false, // If the user is a bot it will not be tracked.\n     trackAllChannels: true, // All of the channels in the guild will be tracked.\n     exemptChannels: () => false, // The user will not be tracked in these channels. (This is a function).\n     channelIds: [], // The channel ids to track. (If trackAllChannels is true, this is ignored)\n     exemptPermissions: [], // The user permissions to not track.\n     exemptMembers: () => false, // The user will not be tracked. (This is a function).\n     trackMute: true, // It will track users if they are muted aswell.\n     trackDeaf: true, // It will track users if they are deafen aswell.\n     minUserCountToParticipate: 0, // The min amount of users to be in a channel to be tracked.\n     maxUserCountToParticipate: 0, // The max amount of users to be in a channel to be tracked.\n     minXpToParticipate: 0, // The min amount of xp needed to be tracked.\n     minLevelToParticipate: 0, // The min level needed to be tracked.\n     maxXpToParticipate: 0, // The max amount of xp needed to be tracked.\n     maxLevelToParticipate: 0, // The max level needed to be tracked.\n     xpAmountToAdd: () => Math.floor(Math.random() * 10) + 1, // The amount of xp to add to the user (This is a function).\n     voiceTimeToAdd: () => 1000, // The amount of time in ms to add to the user (This is a function).\n     voiceTimeTrackingEnabled: true, // Whether the voiceTimeTracking module is enabled.\n     levelingTrackingEnabled: true, // Whether the levelingTracking module is enabled.\n     levelMultiplier: () => 0.1, // This will set level multiplier to 0.1 (This is a function).\n }\n});"],"params":[{"name":"guildId","description":"<p>The id of the guild to create</p>","type":[[["Snowflake"]]]},{"name":"options","description":"<p>The options for the guild</p>","type":[[["GuildOptions"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":69,"file":"Manager.js","path":"src"}},{"name":"edit","description":"<p>Edits the given guild's data.</p>","examples":["client.voiceManager.edit(interaction.guild.id, {\n config: {\n     trackAllChannels: false, // All of the channels in the guild will not be tracked.\n }\n});"],"params":[{"name":"guildId","description":"<p>The id of the guild to edit</p>","type":[[["Snowflake"]]]},{"name":"options","description":"<p>The edit options</p>","optional":true,"default":"{}","type":[[["GuildEditOptions"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":127,"file":"Manager.js","path":"src"}},{"name":"delete","description":"<p>Deletes the given guild's data.</p>","params":[{"name":"guildId","description":"<p>The id of the guild to delete</p>","type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":151,"file":"Manager.js","path":"src"}},{"name":"saveGuild","description":"<p>Saves the guild in the database</p>","params":[{"name":"guildId","description":"<p>The id of the guild to save</p>","type":[[["Snowflake"]]]},{"name":"guildData","description":"<p>The guild data to save</p>","type":[[["GuildData"]]]}],"async":true,"meta":{"line":170,"file":"Manager.js","path":"src"}},{"name":"editGuild","description":"<p>Edits the guild in the database</p>","params":[{"name":"guildId","description":"<p>The id of the guild to edit</p>","type":[[["Snowflake"]]]},{"name":"guildData","description":"<p>The guild data to save</p>","type":[[["GuildData"]]]}],"async":true,"meta":{"line":188,"file":"Manager.js","path":"src"}},{"name":"deleteGuild","description":"<p>Deletes the guild from the database</p>","params":[{"name":"guildId","description":"<p>The id of the guild to delete</p>","type":[[["Snowflake"]]]},{"name":"guildData","description":"<p>The guild data to save</p>","type":[[["GuildData"]]]}],"async":true,"meta":{"line":206,"file":"Manager.js","path":"src"}},{"name":"getAllGuilds","description":"<p>Gets the guilds from the storage file, or create it</p>","async":true,"returns":[[["Promise","<"],["Array","<"],["GuildData",">>"]]],"meta":{"line":224,"file":"Manager.js","path":"src"}},{"name":"_init","description":"<p>Inits the manager</p>","async":true,"meta":{"line":260,"file":"Manager.js","path":"src"}},{"name":"_checkGuild","description":"<p>Checks each guild and updates it if needed</p>","meta":{"line":300,"file":"Manager.js","path":"src"}},{"name":"_handleVoiceStateUpdate","params":[{"name":"oldState","type":[[["VoiceState"]]]},{"name":"newState","type":[[["VoiceState"]]]}],"async":true,"meta":{"line":347,"file":"Manager.js","path":"src"}}],"meta":{"line":20,"file":"Manager.js","path":"src"}},{"name":"User","description":"<p>Represents a User.</p>","construct":{"name":"User","params":[{"name":"manager","description":"<p>The voice time manager.</p>","type":[[["VoiceManager"]]]},{"name":"guild","description":"<p>The guild class.</p>","type":[[["Guild"]]]},{"name":"userId","description":"<p>The user id.</p>","type":[[["Snowflake"]]]},{"name":"options","description":"<p>The user options.</p>","type":[[["UserOptions"]]]}]},"props":[{"name":"manager","description":"<p>The voice time manager.</p>","type":[[["VoiceManager"]]],"meta":{"line":21,"file":"User.js","path":"src"}},{"name":"client","description":"<p>The Discord client.</p>","type":[[["Client"]]],"meta":{"line":26,"file":"User.js","path":"src"}},{"name":"guild","description":"<p>The guild class.</p>","type":[[["Guild"]]],"meta":{"line":31,"file":"User.js","path":"src"}},{"name":"guildId","description":"<p>The guild id.</p>","type":[[["Snowflake"]]],"meta":{"line":36,"file":"User.js","path":"src"}},{"name":"userId","description":"<p>The user id.</p>","type":[[["Snowflake"]]],"meta":{"line":41,"file":"User.js","path":"src"}},{"name":"channels","description":"<p>The channels stored in this user.</p>","type":[[["Collection","<"],["Snowflake",", "],["Channel",">"]]],"meta":{"line":46,"file":"User.js","path":"src"}},{"name":"totalVoiceTime","description":"<p>The total voice time.</p>","type":[[["number"]]],"meta":{"line":56,"file":"User.js","path":"src"}},{"name":"xp","description":"<p>The xp.</p>","type":[[["number"]]],"meta":{"line":61,"file":"User.js","path":"src"}},{"name":"level","description":"<p>The level.</p>","type":[[["number"]]],"meta":{"line":66,"file":"User.js","path":"src"}},{"name":"options","description":"<p>The options for this user.</p>","type":[[["UserOptions"]]],"meta":{"line":71,"file":"User.js","path":"src"}},{"name":"data","description":"<p>The raw user data object.</p>","readonly":true,"type":[[["UserData"]]],"meta":{"line":78,"file":"User.js","path":"src"}}],"methods":[{"name":"edit","description":"<p>Edits the user.</p>","params":[{"name":"options","description":"<p>The options to edit.</p>","type":[[["UserEditOptions"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":95,"file":"User.js","path":"src"}}],"meta":{"line":8,"file":"User.js","path":"src"}}],"interfaces":[],"typedefs":[{"name":"ExemptChannelsFunction","type":[[["function"]]],"params":[{"name":"channel","type":[[["GuildChannel"]]]},{"name":"config","type":[[["Config"]]]}],"returns":[[["Promise","<"],["boolean",">"]],[["boolean"]]],"meta":{"line":365,"file":"Constants.js","path":"src"}},{"name":"ExemptMembersFunction","type":[[["function"]]],"params":[{"name":"member","type":[[["GuildMember"]]]},{"name":"config","type":[[["Config"]]]}],"returns":[[["Promise","<"],["boolean",">"]],[["boolean"]]],"meta":{"line":373,"file":"Constants.js","path":"src"}},{"name":"XPAmountToAddFunction","type":[[["function"]]],"params":[{"name":"config","type":[[["Config"]]]}],"returns":[[["Promise","<"],["number",">"]],[["number"]]],"meta":{"line":381,"file":"Constants.js","path":"src"}},{"name":"VoiceTimeToAddFunction","type":[[["function"]]],"params":[{"name":"config","type":[[["Config"]]]}],"returns":[[["Promise","<"],["number",">"]],[["number"]]],"meta":{"line":388,"file":"Constants.js","path":"src"}},{"name":"LevelMultiplierFunction","type":[[["function"]]],"params":[{"name":"config","type":[[["Config"]]]}],"returns":[[["Promise","<"],["number",">"]],[["number"]]],"meta":{"line":395,"file":"Constants.js","path":"src"}},{"name":"VoiceManagerOptions","description":"<p>The voice manager options.</p>","type":[[["object"]]],"props":[{"name":"storage","description":"<p>The storage path for the guild's data.</p>","optional":true,"default":"\"./guilds.json\"","type":[[["string"]]]},{"name":"deleteMissingGuilds","description":"<p>Whether to delete guilds data that are no longer in the client.</p>","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"default","description":"<p>The default config options.</p>","optional":true,"type":[[["ConfigOptions"]]]},{"name":"default.trackBots","description":"<p>Whether bots are able to be tracked.</p>","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"default.trackAllChannels","description":"<p>Whether to track all of the guild's voice channels.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"default.exemptChannels","description":"<p>Function to filter channels. If true is returned, the channel won't be tracked.</p>","optional":true,"type":[[["ExemptChannelsFunction"]]]},{"name":"default.channelIds","description":"<p>The channels to track (if trackAllChannels is true this will be ignored).</p>","optional":true,"default":"[]","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"default.exemptPermissions","description":"<p>Members with any of these permissions won't be tracked.</p>","optional":true,"default":"[]","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"default.exemptMembers","description":"<p>Function to filter members. If true is returned, the member won't be tracked.</p>","optional":true,"type":[[["ExemptMembersFunction"]]]},{"name":"default.trackMute","description":"<p>Whether members who are muted should be tracked.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"default.trackDeaf","description":"<p>Whether members who are deafened should be tracked.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"default.minUserCountToParticipate","description":"<p>The min amount of users to be in a channel to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"default.maxUserCountToParticipate","description":"<p>The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"default.minXpToParticipate","description":"<p>The min amount of xp the user needs to have to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"default.minLevelToParticipate","description":"<p>The min amount of level the user needs to have to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"default.maxXpToParticipate","description":"<p>The max amount of xp the user can be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"default.maxLevelToParticipate","description":"<p>The max amount of level the user can be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"default.xpAmountToAdd","description":"<p>Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).</p>","optional":true,"type":[[["XPAmountToAddFunction"]]]},{"name":"default.voiceTimeToAdd","description":"<p>Function for voiceTimeToAdd. If not provided, the default value is used (1000).</p>","optional":true,"type":[[["VoiceTimeToAddFunction"]]]},{"name":"defaul.voiceTimeTrackingEnabled","description":"<p>Whether to enable the voice time tracking module.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"default.levelingTrackingEnabled","description":"<p>Whether to enable the leveling tracking module.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"default.levelMultiplier","description":"<p>Function for levelMultiplier. If not provided, the default value is used (0.1).</p>","optional":true,"type":[[["LevelMultiplierFunction"]]]}],"meta":{"line":6,"file":"Constants.js","path":"src"}},{"name":"GuildOptions","description":"<p>The guild options.</p>","type":[[["object"]]],"props":[{"name":"users","description":"<p>The users stored in the guild.</p>","optional":true,"type":[[["Array","<"],["UserOptions",">"]]]},{"name":"config","description":"<p>The config options.</p>","optional":true,"type":[[["ConfigOptions"]]]},{"name":"config.trackBots","description":"<p>Whether bots are able to be tracked.</p>","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"config.trackAllChannels","description":"<p>Whether to track all of the guild's voice channels.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"config.exemptChannels","description":"<p>Function to filter channels. If true is returned, the channel won't be tracked.</p>","optional":true,"type":[[["ExemptChannelsFunction"]]]},{"name":"config.channelIds","description":"<p>The channels to track (if trackAllChannels is true this will be ignored).</p>","optional":true,"default":"[]","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"config.exemptPermissions","description":"<p>Members with any of these permissions won't be tracked.</p>","optional":true,"default":"[]","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"config.exemptMembers","description":"<p>Function to filter members. If true is returned, the member won't be tracked.</p>","optional":true,"type":[[["ExemptMembersFunction"]]]},{"name":"config.trackMute","description":"<p>Whether members who are muted should be tracked.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"config.trackDeaf","description":"<p>Whether members who are deafened should be tracked.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"config.minUserCountToParticipate","description":"<p>The min amount of users to be in a channel to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.maxUserCountToParticipate","description":"<p>The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.minXpToParticipate","description":"<p>The min amount of xp the user needs to have to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.minLevelToParticipate","description":"<p>The min amount of level the user needs to have to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.maxXpToParticipate","description":"<p>The max amount of xp the user can be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.maxLevelToParticipate","description":"<p>The max amount of level the user can be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.xpAmountToAdd","description":"<p>Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).</p>","optional":true,"type":[[["XPAmountToAddFunction"]]]},{"name":"config.voiceTimeToAdd","description":"<p>Function for voiceTimeToAdd. If not provided, the default value is used (1000).</p>","optional":true,"type":[[["VoiceTimeToAddFunction"]]]},{"name":"config.voiceTimeTrackingEnabled","description":"<p>Whether to enable the voice time tracking module.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"config.levelingTrackingEnabled","description":"<p>Whether to enable the leveling tracking module.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"config.levelMultiplier","description":"<p>Function for levelMultiplier. If not provided, the default value is used (0.1).</p>","optional":true,"type":[[["LevelMultiplierFunction"]]]}],"meta":{"line":59,"file":"Constants.js","path":"src"}},{"name":"UserOptions","description":"<p>The user options.</p>","type":[[["object"]]],"props":[{"name":"channels","description":"<p>The channels stored in the user.</p>","optional":true,"type":[[["Array","<"],["ChannelOptions",">"]]]},{"name":"totalVoiceTime","description":"<p>The total voice time of the user.</p>","optional":true,"type":[[["Number"]]]},{"name":"xp","description":"<p>The xp of the user.</p>","optional":true,"type":[[["Number"]]]},{"name":"level","description":"<p>The level of the user.</p>","optional":true,"type":[[["Number"]]]}],"meta":{"line":110,"file":"Constants.js","path":"src"}},{"name":"ChannelOptions","description":"<p>The channel options.</p>","type":[[["object"]]],"props":[{"name":"timeInChannel","description":"<p>The voice time spent in the channel.</p>","optional":true,"type":[[["Number"]]]}],"meta":{"line":126,"file":"Constants.js","path":"src"}},{"name":"ConfigOptions","description":"<p>The config options.</p>","type":[[["object"]]],"props":[{"name":"trackBots","description":"<p>Whether bots are able to be tracked.</p>","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"trackAllChannels","description":"<p>Whether to track all of the guild's voice channels.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"exemptChannels","description":"<p>Function to filter channels. If true is returned, the channel won't be tracked.</p>","optional":true,"type":[[["ExemptChannelsFunction"]]]},{"name":"channelIds","description":"<p>The channels to track (if trackAllChannels is true this will be ignored).</p>","optional":true,"default":"[]","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"exemptPermissions","description":"<p>Members with any of these permissions won't be tracked.</p>","optional":true,"default":"[]","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"exemptMembers","description":"<p>Function to filter members. If true is returned, the member won't be tracked.</p>","optional":true,"type":[[["ExemptMembersFunction"]]]},{"name":"trackMute","description":"<p>Whether members who are muted should be tracked.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"trackDeaf","description":"<p>Whether members who are deafened should be tracked.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"minUserCountToParticipate","description":"<p>The min amount of users to be in a channel to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"maxUserCountToParticipate","description":"<p>The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"minXpToParticipate","description":"<p>The min amount of xp the user needs to have to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"minLevelToParticipate","description":"<p>The min amount of level the user needs to have to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"maxXpToParticipate","description":"<p>The max amount of xp the user can be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"maxLevelToParticipate","description":"<p>The max amount of level the user can be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"xpAmountToAdd","description":"<p>Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).</p>","optional":true,"type":[[["XPAmountToAddFunction"]]]},{"name":"voiceTimeToAdd","description":"<p>Function for voiceTimeToAdd. If not provided, the default value is used (1000).</p>","optional":true,"type":[[["VoiceTimeToAddFunction"]]]},{"name":"voiceTimeTrackingEnabled","description":"<p>Whether to enable the voice time tracking module.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"levelingTrackingEnabled","description":"<p>Whether to enable the leveling tracking module.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"levelMultiplier","description":"<p>Function for levelMultiplier. If not provided, the default value is used (0.1).</p>","optional":true,"type":[[["LevelMultiplierFunction"]]]}],"meta":{"line":136,"file":"Constants.js","path":"src"}},{"name":"GuildEditOptions","description":"<p>The guild edit method options.</p>","type":[[["object"]]],"props":[{"name":"users","description":"<p>The users stored in the guild.</p>","optional":true,"type":[[["Array","<"],["UserOptions",">"]]]},{"name":"config","description":"<p>The config options.</p>","optional":true,"type":[[["ConfigOptions"]]]},{"name":"config.trackBots","description":"<p>Whether bots are able to be tracked.</p>","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"config.trackAllChannels","description":"<p>Whether to track all of the guild's voice channels.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"config.exemptChannels","description":"<p>Function to filter channels. If true is returned, the channel won't be tracked.</p>","optional":true,"type":[[["ExemptChannelsFunction"]]]},{"name":"config.channelIds","description":"<p>The channels to track (if trackAllChannels is true this will be ignored).</p>","optional":true,"default":"[]","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"config.exemptPermissions","description":"<p>Members with any of these permissions won't be tracked.</p>","optional":true,"default":"[]","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"config.exemptMembers","description":"<p>Function to filter members. If true is returned, the member won't be tracked.</p>","optional":true,"type":[[["ExemptMembersFunction"]]]},{"name":"config.trackMute","description":"<p>Whether members who are muted should be tracked.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"config.trackDeaf","description":"<p>Whether members who are deafened should be tracked.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"config.minUserCountToParticipate","description":"<p>The min amount of users to be in a channel to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.maxUserCountToParticipate","description":"<p>The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.minXpToParticipate","description":"<p>The min amount of xp the user needs to have to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.minLevelToParticipate","description":"<p>The min amount of level the user needs to have to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.maxXpToParticipate","description":"<p>The max amount of xp the user can be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.maxLevelToParticipate","description":"<p>The max amount of level the user can be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"config.xpAmountToAdd","description":"<p>Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).</p>","optional":true,"type":[[["XPAmountToAddFunction"]]]},{"name":"config.voiceTimeToAdd","description":"<p>Function for voiceTimeToAdd. If not provided, the default value is used (1000).</p>","optional":true,"type":[[["VoiceTimeToAddFunction"]]]},{"name":"config.voiceTimeTrackingEnabled","description":"<p>Whether to enable the voice time tracking module.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"config.levelingTrackingEnabled","description":"<p>Whether to enable the leveling tracking module.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"config.levelMultiplier","description":"<p>Function for levelMultiplier. If not provided, the default value is used (0.1).</p>","optional":true,"type":[[["LevelMultiplierFunction"]]]}],"meta":{"line":182,"file":"Constants.js","path":"src"}},{"name":"UserEditOptions","description":"<p>The user edit method options.</p>","type":[[["object"]]],"props":[{"name":"channels","description":"<p>The channels stored in the user.</p>","optional":true,"type":[[["Array","<"],["ChannelOptions",">"]]]},{"name":"totalVoiceTime","description":"<p>The total voice time of the user.</p>","optional":true,"type":[[["Number"]]]},{"name":"xp","description":"<p>The xp of the user.</p>","optional":true,"type":[[["Number"]]]},{"name":"level","description":"<p>The level of the user.</p>","optional":true,"type":[[["Number"]]]}],"meta":{"line":233,"file":"Constants.js","path":"src"}},{"name":"ChannelEditOptions","description":"<p>The channel edit method options.</p>","type":[[["object"]]],"props":[{"name":"timeInChannel","description":"<p>The voice time spent in the channel.</p>","optional":true,"type":[[["Number"]]]}],"meta":{"line":249,"file":"Constants.js","path":"src"}},{"name":"ConfigEditOptions","description":"<p>The config edit method options.</p>","type":[[["object"]]],"props":[{"name":"trackBots","description":"<p>Whether bots are able to be tracked.</p>","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"trackAllChannels","description":"<p>Whether to track all of the guild's voice channels.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"exemptChannels","description":"<p>Function to filter channels. If true is returned, the channel won't be tracked.</p>","optional":true,"type":[[["ExemptChannelsFunction"]]]},{"name":"channelIds","description":"<p>The channels to track (if trackAllChannels is true this will be ignored).</p>","optional":true,"default":"[]","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"exemptPermissions","description":"<p>Members with any of these permissions won't be tracked.</p>","optional":true,"default":"[]","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"exemptMembers","description":"<p>Function to filter members. If true is returned, the member won't be tracked.</p>","optional":true,"type":[[["ExemptMembersFunction"]]]},{"name":"trackMute","description":"<p>Whether members who are muted should be tracked.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"trackDeaf","description":"<p>Whether members who are deafened should be tracked.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"minUserCountToParticipate","description":"<p>The min amount of users to be in a channel to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"maxUserCountToParticipate","description":"<p>The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"minXpToParticipate","description":"<p>The min amount of xp the user needs to have to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"minLevelToParticipate","description":"<p>The min amount of level the user needs to have to be tracked (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"maxXpToParticipate","description":"<p>The max amount of xp the user can be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"maxLevelToParticipate","description":"<p>The max amount of level the user can be tracked uptil (0 is equal to no limit).</p>","optional":true,"default":"\"0\"","type":[[["Number"]]]},{"name":"xpAmountToAdd","description":"<p>Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).</p>","optional":true,"type":[[["XPAmountToAddFunction"]]]},{"name":"voiceTimeToAdd","description":"<p>Function for voiceTimeToAdd. If not provided, the default value is used (1000).</p>","optional":true,"type":[[["VoiceTimeToAddFunction"]]]},{"name":"voiceTimeTrackingEnabled","description":"<p>Whether to enable the voice time tracking module.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"levelingTrackingEnabled","description":"<p>Whether to enable the leveling tracking module.</p>","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"levelMultiplier","description":"<p>Function for levelMultiplier. If not provided, the default value is used (0.1).</p>","optional":true,"type":[[["LevelMultiplierFunction"]]]}],"meta":{"line":259,"file":"Constants.js","path":"src"}},{"name":"GuildData","description":"<p>Raw guild object (used to store guilds in the database).</p>","type":[[["object"]]],"props":[{"name":"guildId","description":"<p>The guild's id.</p>","type":[[["Snowflake"]]]},{"name":"users","description":"<p>The users stored in the guild.</p>","type":[[["Array","<"],["UserData",">"]]]},{"name":"config","description":"<p>The config of the guild.</p>","type":[[["ConfigData"]]]}],"meta":{"line":305,"file":"Constants.js","path":"src"}},{"name":"UserData","description":"<p>Raw user object (used to store users in the database).</p>","type":[[["object"]]],"props":[{"name":"guildId","description":"<p>The user's guild id.</p>","type":[[["Snowflake"]]]},{"name":"userId","description":"<p>The user's id.</p>","type":[[["Snowflake"]]]},{"name":"channels","description":"<p>The channels the user has spent voice time in.</p>","type":[[["Array","<"],["ChannelData",">"]]]},{"name":"totalVoiceTime","description":"<p>The total amount of voice time the user has.</p>","type":[[["Number"]]]},{"name":"xp","description":"<p>The amount of xp the user has.</p>","type":[[["Number"]]]},{"name":"level","description":"<p>The amount of level the user has.</p>","type":[[["Number"]]]}],"meta":{"line":315,"file":"Constants.js","path":"src"}},{"name":"ChannelData","description":"<p>Raw channel object (used to store channels in the database).</p>","type":[[["object"]]],"props":[{"name":"guildId","description":"<p>The channel's guild id.</p>","type":[[["Snowflake"]]]},{"name":"channelId","description":"<p>The channel's id.</p>","type":[[["Snowflake"]]]},{"name":"timeInChannel","description":"<p>The total amount of voice time the user has spent in this channel.</p>","type":[[["Number"]]]}],"meta":{"line":328,"file":"Constants.js","path":"src"}},{"name":"ConfigData","description":"<p>Raw config object (used to store config's in the database).</p>","type":[[["object"]]],"props":[{"name":"guildId","description":"<p>The config's guild id.</p>","type":[[["Snowflake"]]]},{"name":"trackBots","description":"<p>Whether bots are able to be tracked.</p>","type":[[["Boolean"]]]},{"name":"trackAllChannels","description":"<p>Whether to track all of the guild's voice channels.</p>","type":[[["Boolean"]]]},{"name":"exemptChannels","description":"<p>Function to filter channels. If true is returned, the channel won't be tracked.</p>","type":[[["ExemptChannelsFunction"]]]},{"name":"channelIds","description":"<p>The channels to track (if trackAllChannels is true this will be ignored).</p>","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"exemptPermissions","description":"<p>Members with any of these permissions won't be tracked.</p>","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"exemptMembers","description":"<p>Function to filter members. If true is returned, the member won't be tracked.</p>","type":[[["ExemptMembersFunction"]]]},{"name":"trackMute","description":"<p>Whether members who are muted should be tracked.</p>","type":[[["Boolean"]]]},{"name":"trackDeaf","description":"<p>Whether members who are deafened should be tracked.</p>","type":[[["Boolean"]]]},{"name":"minUserCountToParticipate","description":"<p>The min amount of users to be in a channel to be tracked (0 is equal to no limit).</p>","type":[[["Number"]]]},{"name":"maxUserCountToParticipate","description":"<p>The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).</p>","type":[[["Number"]]]},{"name":"minXpToParticipate","description":"<p>The min amount of xp the user needs to have to be tracked (0 is equal to no limit).</p>","type":[[["Number"]]]},{"name":"minLevelToParticipate","description":"<p>The min amount of level the user needs to have to be tracked (0 is equal to no limit).</p>","type":[[["Number"]]]},{"name":"maxXpToParticipate","description":"<p>The max amount of xp the user can be tracked uptil (0 is equal to no limit).</p>","type":[[["Number"]]]},{"name":"maxLevelToParticipate","description":"<p>The max amount of level the user can be tracked uptil (0 is equal to no limit).</p>","type":[[["Number"]]]},{"name":"xpAmountToAdd","description":"<p>Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).</p>","type":[[["XPAmountToAddFunction"]]]},{"name":"voiceTimeToAdd","description":"<p>Function for voiceTimeToAdd. If not provided, the default value is used (1000).</p>","type":[[["VoiceTimeToAddFunction"]]]},{"name":"voiceTimeTrackingEnabled","description":"<p>Whether to enable the voice time tracking module.</p>","type":[[["Boolean"]]]},{"name":"levelingTrackingEnabled","description":"<p>Whether to enable the leveling tracking module.</p>","type":[[["Boolean"]]]},{"name":"levelMultiplier","description":"<p>Function for levelMultiplier. If not provided, the default value is used (0.1).</p>","type":[[["LevelMultiplierFunction"]]]}],"meta":{"line":338,"file":"Constants.js","path":"src"}}],"externals":[]}